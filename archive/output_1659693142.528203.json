{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 1}, "tests": {"0": {"status": "FAIL", "message": "   selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\n   from unknown error: web view not found\n     (Session info: chrome=103.0.5060.134)\n   Stacktrace:\n   Backtrace:\n   \tOrdinal0 [0x007F5FD3+2187219]\n   \tOrdinal0 [0x0078E6D1+1763025]\n   \tOrdinal0 [0x006A3E78+802424]\n   \tOrdinal0 [0x0068C680+706176]\n   \tOrdinal0 [0x006EF519+1111321]\n   \tOrdinal0 [0x006FC762+1165154]\n   \tOrdinal0 [0x006EC9A6+1100198]\n   \tOrdinal0 [0x006C6F80+946048]\n   \tOrdinal0 [0x006C7E76+949878]\n   \tGetHandleVerifier [0x00A990C2+2721218]\n   \tGetHandleVerifier [0x00A8AAF0+2662384]\n   \tGetHandleVerifier [0x0088137A+526458]\n   \tGetHandleVerifier [0x00880416+522518]\n   \tOrdinal0 [0x00794EAB+1789611]\n   \tOrdinal0 [0x007997A8+1808296]\n   \tOrdinal0 [0x00799895+1808533]\n   \tOrdinal0 [0x007A26C1+1844929]\n   \tBaseThreadInitThunk [0x75426739+25]\n   \tRtlGetFullPathName_UEx [0x772F8FEF+1215]\n   \tRtlGetFullPathName_UEx [0x772F8FBD+1165]\n", "test_name": "test_login_001_valid", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.yield_fixture()\n    def browser_config():\n        global driver\n    \n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n>       driver.get('https://the-internet.herokuapp.com/upload')\n\nPytestDemo\\test_login_pytest.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Asus\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in get\n    self.execute(Command.GET, {'url': url})\nC:\\Users\\Asus\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B45A1D0A90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...unk [0x75426739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x772F8FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x772F8FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from disconnected: received Inspector.detached event\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x007F5FD3+2187219]\nE       \tOrdinal0 [0x0078E6D1+1763025]\nE       \tOrdinal0 [0x006A3E78+802424]\nE       \tOrdinal0 [0x00696BAE+748462]\nE       \tOrdinal0 [0x0069679F+747423]\nE       \tOrdinal0 [0x00695D3F+744767]\nE       \tOrdinal0 [0x00694C28+740392]\nE       \tOrdinal0 [0x00695228+741928]\nE       \tOrdinal0 [0x006A02C0+787136]\nE       \tOrdinal0 [0x006965AD+746925]\nE       \tOrdinal0 [0x006971E2+750050]\nE       \tOrdinal0 [0x006967BA+747450]\nE       \tOrdinal0 [0x00695D3F+744767]\nE       \tOrdinal0 [0x00694C28+740392]\nE       \tOrdinal0 [0x006950FD+741629]\nE       \tOrdinal0 [0x006A5644+808516]\nE       \tOrdinal0 [0x006FD66D+1169005]\nE       \tOrdinal0 [0x006ECB8C+1100684]\nE       \tOrdinal0 [0x006FCFC2+1167298]\nE       \tOrdinal0 [0x006EC9A6+1100198]\nE       \tOrdinal0 [0x006C6F80+946048]\nE       \tOrdinal0 [0x006C7E76+949878]\nE       \tGetHandleVerifier [0x00A990C2+2721218]\nE       \tGetHandleVerifier [0x00A8AAF0+2662384]\nE       \tGetHandleVerifier [0x0088137A+526458]\nE       \tGetHandleVerifier [0x00880416+522518]\nE       \tOrdinal0 [0x00794EAB+1789611]\nE       \tOrdinal0 [0x007997A8+1808296]\nE       \tOrdinal0 [0x00799895+1808533]\nE       \tOrdinal0 [0x007A26C1+1844929]\nE       \tBaseThreadInitThunk [0x75426739+25]\nE       \tRtlGetFullPathName_UEx [0x772F8FEF+1215]\nE       \tRtlGetFullPathName_UEx [0x772F8FBD+1165]\n\nC:\\Users\\Asus\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException\n", "test_name": "test_login_002_invalid", "rerun": "0"}}, "suite_name": "PytestDemo/test_login_pytest.py"}}}, "date": "August 05, 2022", "start_time": 1659693094.791689, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "1", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "2"}